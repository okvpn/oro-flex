<?php

namespace Oro\Bundle\EntityExtendBundle\Extend;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;
use Oro\Bundle\EntityConfigBundle\Config\EntityManagerBag;
use Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider;
use Oro\Bundle\EntityExtendBundle\EntityConfig\ExtendScope;

/**
 * The generator of proxy classes for extended entities.
 */
class EntityProxyGenerator
{
    /** @var string */
    protected $kernelCacheDir;


    public function __construct(protected ManagerRegistry $registry, protected EntityManagerBag $entityManagerBag, protected ConfigProvider $extendConfigProvider, protected $cacheDir)
    {
        $this->kernelCacheDir = $cacheDir;
    }

    /**
     * Gets the cache directory
     *
     * @return string
     */
    public function getCacheDir()
    {
        return $this->cacheDir;
    }

    /**
     * Sets the cache directory
     *
     * @param string $cacheDir
     */
    public function setCacheDir($cacheDir)
    {
        $this->cacheDir = $cacheDir;
    }

    /**
     * Generate doctrine proxy classes for extended entities
     */
    public function generateProxies()
    {
        foreach ($this->entityManagerBag->getEntityManagers() as $em) {
            $this->generateEntityManagerProxies($em);
        }

        /** @var EntityManagerInterface $em */
        foreach ($this->registry->getManagers() as $em) {
            $this->generateAllProxies($em);
        }
    }

    /**
     * @param EntityManagerInterface $em
     * @return void
     */
    public function generateAllProxies(EntityManagerInterface $em): void
    {
        // if proxies are autogenerated we don't need to generate them in the cache warmer
        if ($em->getConfiguration()->getAutoGenerateProxyClasses()) {
            return;
        }

        $proxyCacheDir = $em->getConfiguration()->getProxyDir();
        if (!empty($this->cacheDir)
            && $this->kernelCacheDir !== $this->cacheDir
            && str_starts_with($proxyCacheDir, $this->kernelCacheDir)
        ) {
            $proxyCacheDir = $this->cacheDir . substr($proxyCacheDir, \strlen($this->kernelCacheDir));
        }

        // we need the directory no matter the proxy cache generation strategy
        if (!is_dir($proxyCacheDir)) {
            if (false === @mkdir($proxyCacheDir, 0777, true) && !is_dir($proxyCacheDir)) {
                throw new \RuntimeException(sprintf('Unable to create the Doctrine Proxy directory "%s".', $proxyCacheDir));
            }
        } elseif (!is_writable($proxyCacheDir)) {
            throw new \RuntimeException(sprintf('The Doctrine Proxy directory "%s" is not writeable for the current system user.', $proxyCacheDir));
        }

        $classes = $em->getMetadataFactory()->getAllMetadata();
        $em->getProxyFactory()->generateProxyClasses($classes, $proxyCacheDir);
    }

    /**
     * Generate doctrine proxy classes for extended entities for the given entity manager
     */
    protected function generateEntityManagerProxies(EntityManagerInterface $em)
    {
        $isAutoGenerated = $em->getConfiguration()->getAutoGenerateProxyClasses();
        if (!$isAutoGenerated) {
            $proxyDir = $em->getConfiguration()->getProxyDir();
            if (!empty($this->cacheDir)
                && $this->kernelCacheDir !== $this->cacheDir
                && str_starts_with($proxyDir, $this->kernelCacheDir)
            ) {
                $proxyDir = $this->cacheDir . substr($proxyDir, \strlen($this->kernelCacheDir));
            }
            $metadataFactory = $em->getMetadataFactory();
            $proxyFactory    = $em->getProxyFactory();
            $extendConfigs   = $this->extendConfigProvider->getConfigs(null, true);
            foreach ($extendConfigs as $extendConfig) {
                if (!$extendConfig->is('is_extend')) {
                    continue;
                }
                if ($extendConfig->in('state', [ExtendScope::STATE_NEW, ExtendScope::STATE_DELETE])) {
                    continue;
                }

                $entityClass   = $extendConfig->getId()->getClassName();
                $proxyFileName = $proxyDir . DIRECTORY_SEPARATOR . '__CG__'
                    . str_replace('\\', '', $entityClass) . '.php';
                $metadata      = $metadataFactory->getMetadataFor($entityClass);

                $proxyFactory->generateProxyClasses([$metadata], $proxyDir);
                clearstatcache(true, $proxyFileName);
            }
        }
    }
}
